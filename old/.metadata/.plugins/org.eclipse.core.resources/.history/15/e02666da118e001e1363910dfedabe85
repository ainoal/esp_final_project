#include <xparameters.h>
#include <xgpio.h>
#include "btn_setup.h"
#include "user_actions.h"
#include "timers.h"
#include "semphr.h"
SemaphoreHandle_t button_semaphore;
TimerHandle_t xTimer;

XGpio BTNS_SWTS;
u8 buttons = 0;
int temp = 0;

void vTimerCallback(TimerHandle_t xTimer) {
    xSemaphoreGive(button_semaphore); 	// Give the semaphore when timer runs out
    printf("Button semaphore given\n");
}

void print_sth(void) {
	printf("test\n");
}

void init_semaphore_timer(void) {
	printf("Trying to create a timer");
	xTimer = xTimerCreate("SemaphoreTimer", pdMS_TO_TICKS(5000), pdFALSE, (void *)0, vTimerCallback);
	if (xTimer != NULL) {
        xTimerStart(xTimer, 0);
        printf("Timer started.\n");
    } else {
    	printf("Timer could not be started.\n");
    }
}

void init_button_semaphore(void) {
	/* Create semaphore */
	button_semaphore = xSemaphoreCreateBinary();
	if (button_semaphore != NULL) {
		xSemaphoreGive(button_semaphore);		// Make the semaphore initially available
	} else {
		// Semaphore creation failed, implement error handling
	}
}

void SetupPushButtons()
{
	XGpio_Initialize(&BTNS_SWTS, BUTTONS_AXI_ID);
	XGpio_InterruptEnable(&BTNS_SWTS, 0xF);
	XGpio_InterruptGlobalEnable(&BTNS_SWTS);

	Xil_ExceptionInit();

	// Enable interrupts.
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT, (Xil_ExceptionHandler) XScuGic_InterruptHandler, &xInterruptController);

	/* Defines the PushButtons_Intr_Handler as the FIQ interrupt handler.*/
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_FIQ_INT,
								 (Xil_ExceptionHandler) PushButtons_Intr_Handler,
								 &xInterruptController);
	Xil_ExceptionEnableMask(XIL_EXCEPTION_FIQ);
}

void PushButtons_Intr_Handler(void *data)
{
	int isUARTSemaphoreTaken = checkUARTSemaphoreStatus();
	print_sth();
	if (isUARTSemaphoreTaken == 0) {
		/* Buttons have an effect only if the semaphore is free */
		//BUTTON SEMAPHORE ACQUIRED
		if (button_semaphore != NULL) {
			/* See if the semaphore can be obtained. If the semaphore
			 * is not available wait 10 ticks to see if it becomes free. */

			if (xSemaphoreTake(button_semaphore, 10) == pdTRUE) {
				/* The semaphore was successfully obtained so the shared
				 * resource can be accessed safely. */
				printf("Button semaphore taken\n");
				print_sth();
				init_semaphore_timer();
				printf("weird\n");
			}
			else {
				/* The semaphore could not be obtained even after waiting 10 ticks, so
				 the shared resource cannot be accessed. */
				// TODO: IMPLEMENT EXCEPTION HANDLING
			}
		}

		buttons = XGpio_DiscreteRead(&BTNS_SWTS, BUTTONS_channel);
		switch(buttons)
			{
			case 0x01:
				AXI_LED_DATA ^= 0x01;
				change_state();
				break;
			case 0x02:
				AXI_LED_DATA ^= 0x02;
				change_par_to_conf();
				break;
			case 0x04:
				AXI_LED_DATA ^= 0x04;
				if (get_state()!=0){
					change_setpoint(-0.1);}
				else{
					change_par_value(-1);}
				break;
			case 0x08:
				AXI_LED_DATA ^= 0x08;
				if (get_state()!=0){
					change_setpoint(0.1);}
				else{
					change_par_value(1);}
				break;
				break;
			}
	}
	else {
		printf("UART is in conf state\n");
	}

	XGpio_InterruptClear(&BTNS_SWTS,0xF);
}

int checkUARTSemaphoreStatus(void) {
	int isUARTSemaphoreTaken = 0;
    if (xSemaphoreTake(uart_semaphore, 0) == pdTRUE) {
        xSemaphoreGive(uart_semaphore); // Release the semaphore immediately
        isUARTSemaphoreTaken = 0; 	// Semaphore is available
    } else {
        isUARTSemaphoreTaken = 1; 		// Semaphore is taken
    }
    return isUARTSemaphoreTaken;
}

