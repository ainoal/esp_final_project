#include <xparameters.h>
#include <xgpio.h>
#include "btn_setup.h"
#include "user_actions.h"

// Use debounce delay to handle possible fluctuations in the signal
// when pressing a button, so that a single button press is not taken as 2
#define DEBOUNCE_DELAY 1000

SemaphoreHandle_t button_semaphore;
TimerHandle_t semaphore_timer;

XGpio BTNS_SWTS;
u8 buttons = 0;

void vTimerCallback(TimerHandle_t semaphore_timer) {
    xSemaphoreGive(button_semaphore); 	// Give the semaphore when timer runs out
    printf("Button semaphore given\n");
}

void init_semaphore_timer(void) {
	semaphore_timer = xTimerCreate("SemaphoreTimer", pdMS_TO_TICKS(10000), pdFALSE, (void *)0, vTimerCallback);
	if (semaphore_timer != NULL) {
        xTimerStart(semaphore_timer, 0);
        printf("Timer started.\n");
    } else {
    	printf("Timer could not be started.\n");
    }
}

void PushButtons_Intr_Handler(void *data)
//BUTTON SEMAPHORE ACQUIRED
{
	int isUARTSemaphoreTaken = checkUARTSemaphoreStatus();
	if (isUARTSemaphoreTaken == 0) {
		/* Buttons have an effect only if the semaphore is free */
		buttons = XGpio_DiscreteRead(&BTNS_SWTS, BUTTONS_channel);
		switch(buttons)
			{
			case 0x01:
				AXI_LED_DATA ^= 0x01;
				change_state();
				break;
			case 0x02:
				AXI_LED_DATA ^= 0x02;
				change_par_to_conf();
				break;
			case 0x04:
				AXI_LED_DATA ^= 0x04;
				if (get_state()!=0){
					change_setpoint(-0.1);}
				else{
					change_par_value(-1);}
				break;
			case 0x08:
				AXI_LED_DATA ^= 0x08;
				if (get_state()!=0){
					change_setpoint(0.1);}
				else{
					change_par_value(1);}
				break;
				break;
			}
	}
	else {
		printf("UART is in conf state\n");
	}

	XGpio_InterruptClear(&BTNS_SWTS,0xF);
}

int checkUARTSemaphoreStatus(void) {
	int isUARTSemaphoreTaken = 0;
    if (xSemaphoreTake(uart_semaphore, 0) == pdTRUE) {
        xSemaphoreGive(uart_semaphore); // Release the semaphore immediately
        isUARTSemaphoreTaken = 0; 	// Semaphore is available
    } else {
        isUARTSemaphoreTaken = 1; 		// Semaphore is taken
    }
    return isUARTSemaphoreTaken;
}

