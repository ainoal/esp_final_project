/*
 * This state machine demo demonstrates the state changes when
 * the "BTN0" button is pressed. It visualizes the state with
 * lighting up the respective LED (not the final functionality;
 * feel free to modify and build on top of this)
 */

// Move definitions to a header file in the final project?
#define CONFIGURATION 0
#define IDLING 1
#define MODULATING 2

// Use debounce delay to handle possible fluctuations in the signal
// when pressing a button, so that a single button press is not taken as 2
#define DEBOUNCE_DELAY 1000

#include <zynq_registers.h>
#include <xtime_l.h>
#include "stdio.h"
#include "stdbool.h"

/*#include <zynq_registers.h> // Defines hardware registers
#include "stdio.h"
#include "stdbool.h"

int main(void)
{
// Set direction for bits 0-3 to output for the LEDs
AXI_LED_TRI = 0b0000;

// Set direction for bits 0-3 to input for the buttons
AXI_BTN_TRI = 0b1111;

// setup the variable
int mode = 1;
bool choose_K = 0;
int Ki = 1;
int Kp = 1;
int dKi = 0.1;
int dKp = dKi;

while(1){ // Loop forever


	if (AXI_BTN_DATA == 0b0001){  // Change mode
		mode ++;
		if (mode == 4) mode = 1;

		if (mode == 1) {
			AXI_LED_DATA = 0b0001;
			printf("Mode : configuration \n");
			sleep(1);
		}
		else if (mode == 2) {
			AXI_LED_DATA = 0b0010;
			printf("Mode : idling \n");
			sleep(1);
		}
		else if (mode == 3) {
			AXI_LED_DATA = 0b0100;
			printf("Mode : modulating \n");
			sleep(1);
		}
	}

	// In configuration mode :
	if (mode == 1){

		if (AXI_BTN_DATA == 0b0010){  // selects configurable parameter Kp or Ki
			choose_K = ~choose_K;

			if (choose_K == 0){
				printf("Now editing Ki \n");
				sleep(1);
			}
			if (choose_K == 1) {
				printf("Now editing Kp \n");
				sleep(1);
			}
		}

		if (AXI_BTN_DATA == 0b0100){  // Decrease value of K
			if (choose_K == 0) {
				Ki -= dKi;
				printf("Now editing Ki \n");
			}
			if (choose_K == 1) {
				Kp -= dKp;
				printf("\n");
			}
		}

		if (AXI_BTN_DATA == 0b1000){  // Increase value of K
			if (choose_K == 0) {
				Ki += dKi;
				printf(" \n");
			}
			if (choose_K == 1) {
				Kp += dKp;
				printf(" \n");
			}
		}
	}

	// Idling mode
	if (mode == 2){
		//...
	}

	// Modulation mode
	if (mode == 3){

		if (AXI_BTN_DATA == 0b0100){  // Decrease reference output voltage
			//...
		}

		if (AXI_BTN_DATA == 0b1000){  // Increase reference output voltage
			//...
		}

	}
}

}
*/


int main(void) {
	int state = CONFIGURATION;

	AXI_LED_TRI &= 0x0; 	// Set LEDs as output (0)
	AXI_BTN_TRI &= 0xF;	// Set buttons as input (1)

	// setup the variable
	bool choose_K = 0;
	int Ki = 1;
	int Kp = 1;
	int dKi = 0.1;
	int dKp = dKi;

	XTime last_debounce_time = 0;
	XTime current_time;
	int button_pressed = 0;

	while(1) {
		switch(state) {
		case CONFIGURATION:
			printf("Mode : configuration \n");
			AXI_LED_DATA = 0b0001;	// Show state with LED

			if (AXI_BTN_DATA == 0b0010){  // selects configurable parameter Kp or Ki
				choose_K = ~choose_K;

				if (choose_K == 0){
					printf("Now editing Ki \n");
					sleep(1);
				}
				if (choose_K == 1) {
					printf("Now editing Kp \n");
					sleep(1);
				}
			}
			if (AXI_BTN_DATA == 0b0100){  // Decrease value of K
				if (choose_K == 0) {
					Ki -= dKi;
					printf("Now editing Ki \n");
				}
				if (choose_K == 1) {
					Kp -= dKp;
					printf("\n");
				}
			}
			if (AXI_BTN_DATA == 0b1000){  // Increase value of K
				if (choose_K == 0) {
					Ki += dKi;
					printf(" \n");
				}
				if (choose_K == 1) {
					Kp += dKp;
					printf(" \n");
				}
			}

			if (AXI_BTN_DATA == 0b0001) {
				XTime_GetTime(&current_time);
				if (!button_pressed && (current_time - last_debounce_time) >= DEBOUNCE_DELAY) {
					last_debounce_time = current_time;
					button_pressed = 1;
					state = IDLING;
				}
			} else {
				button_pressed = 0;
			}
			break;
		case IDLING:
			printf("Mode : idling \n");
			AXI_LED_DATA = 0b0010;	// Show state with LED
			if (AXI_BTN_DATA == 0b0001) {
				XTime_GetTime(&current_time);
				if (!button_pressed && (current_time - last_debounce_time) >= DEBOUNCE_DELAY) {
					last_debounce_time = current_time;
					button_pressed = 1;
					state = MODULATING;
				}
			} else {
				button_pressed = 0;
			}
			break;
		case MODULATING:
			printf("Mode : modulating \n");
			AXI_LED_DATA = 0b0100;	// Show state with LED
			if (AXI_BTN_DATA == 0b0001) {
				XTime_GetTime(&current_time);
				if (!button_pressed && (current_time - last_debounce_time) >= DEBOUNCE_DELAY) {
					last_debounce_time = current_time;
					button_pressed = 1;
					state = CONFIGURATION;
				}
			} else {
				button_pressed = 0;
			}
			break;
		default:
			break;
		}
	}
}
